#!/bin/bash
# Copyright lowRISC contributors.
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0
set -e

TESTDATA_DIR="$(dirname "$0")"
RUST_FILE="$TESTDATA_DIR/mod.rs"

if ! command -v ascii2der &> /dev/null; then
  echo "Please install https://github.com/google/der-ascii to run this script."
  exit 1
fi

cat <<EOF >"$RUST_FILE"
// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

//! Generated certificate test data.
//!
//! Do not edit this file by hand; regenerate it with
//! \`src/cert/testdata/generate.sh\` instead. You'll need to install the
//! https://github.com/google/der-ascii tool first.
EOF

rm -rf "$TESTDATA_DIR/der"
mkdir "$TESTDATA_DIR/der"

# Convert all .der files into DER directly.
for ascii in $(find "$TESTDATA_DIR" -name '*.der'); do
  echo "$ascii"
  file="$(basename "${ascii%.*}")"
  cat "$ascii" | ascii2der > "$TESTDATA_DIR/der/$file.bin"
  cat <<EOF >>"$RUST_FILE"

#[rustfmt::skip]
/// Generated from $file.der.
pub const ${file^^}: untrusted::Input = untrusted::Input::from(include_bytes!("der/$file.bin"));
EOF
done

# Convert all .tbs files into DER, then sign them, and finally encode as
# certificates.
#
# ".tbs" stands for "to be signed", as in an X509 tbsCertificate.
for tbs in $(find "$TESTDATA_DIR" -name '*.tbs'); do
  echo "$tbs"
  file="$(basename "${tbs%.*}")"
  alg="$(grep '# sign-alg:' "$tbs" | cut -d: -f2)"
  key="$TESTDATA_DIR/$(grep '# sign-key:' "$tbs" | cut -d: -f2)"
  ascii2der -i "$tbs" | openssl dgst \
    -keyform DER -sign "$key" -sha256 \
    -out "$TESTDATA_DIR/der/$file.sig"
  ascii2der -o "$TESTDATA_DIR/der/$file.bin" <<EOF
SEQUENCE {
  $(cat "$tbs")
  $alg
  BIT_STRING {
    \`00\` \`$(
      xxd -p "$TESTDATA_DIR/der/$file.sig" | \
        tr -d '\n' # Delete trailing newlines.
    )\`
  }
}
EOF
  # Generate a PEM version of the file for debugging convenience.
  if [[ "$file" != *bad* ]]; then
    openssl x509 -inform DER -outform PEM \
      -in "$TESTDATA_DIR/der/$file.bin" \
      -out "$TESTDATA_DIR/der/$file.pem"
  fi
  cat <<EOF >>"$RUST_FILE"

#[rustfmt::skip]
/// Generated from $file.tbs.
/// Signed with $key.
pub const ${file^^}: &[u8] = include_bytes!("der/$file.bin");
EOF
done
