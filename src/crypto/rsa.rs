// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

//! RSA, a public-key encryption algorithm.

/// A length for the modulus of an RSA public key.
#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
pub enum ModulusLength {
    /// A 2048-bit modulus.
    Bits2048,
    /// A 3072-bit modulus.
    Bits3072,
    /// A 4096-bit modulus.
    Bits4096,
}

/// The RSA public key type for a particular [`Engine`] type.
///
/// Rather than prescribe specific types of RSA keys, a particular [`Engine`]
/// implementation can provide its own key types, which implement this
/// trait.
///
/// [`Engine`]: trait.Engine.html
pub trait PublicKey {
    /// Returns this key's modulus length.
    fn len(&self) -> ModulusLength;
}

/// Convenience type alias for simplifying signatures involving a `Builder`.
pub type Error<E> = <E as Engine>::Error;

/// A builder for constructing primed RSA engines.
///
/// In particular, a value of a type implementing this trait already has
/// everything it needs (such as OS handles) to start performing RSA
/// operations.
pub trait Builder {
    /// The concrete `Engine` generated by this trait.
    type Engine: Engine;

    /// Checks whether [`Self::Engine`] supports public keys with moduli of
    /// length `len`. This function is primarily for `manticore` to dynamically
    /// discover all the capabilities of an engine.
    ///
    /// [`Self::Engine`]: trait.Builder.html#associatedtype.Engine
    fn supports_modulus(&self, len: ModulusLength) -> bool;

    /// Creates a new [`Engine`], primed with the given key, which may be used
    /// repeatedly to perform operations.
    ///
    /// [`Engine`]: trait.Engine.html
    fn new_engine(
        &self,
        key: <Self::Engine as Engine>::Key,
    ) -> Result<Self::Engine, Error<Self::Engine>>;
}

/// An RSA engine, already primed with a key.
///
/// There is no way to extract the key back out of an `Engine` value.
pub trait Engine {
    /// The error returned when an RSA operation fails.
    type Error;
    /// The key type used by this engine.
    type Key: PublicKey;

    /// Uses this engine to verify `signature` against `expected_hash`, by
    /// performing an encryption operation on `signature`, and comparing the
    /// result to a hash of `message`.
    ///
    /// `signature` is expected to be in PKCS v1.5 format.
    ///
    /// If the underlying cryptographic operation succeeds, returns `Ok(())`.
    /// Failures, including signature check failures, are included in the
    /// `Err` variant.
    fn verify_signature(
        &mut self,
        signature: &[u8],
        message: &[u8],
    ) -> Result<(), Self::Error>;
}
