// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

//! SHA-256, a cryptographic hash algorithm.

#[cfg(doc)]
use std::convert::Infallible;

/// A 256-bit message digest.
///
/// See [`Hasher`](trait.Hasher.html).
pub type Digest = [u8; 32];

/// An error returned by a SHA-256 function.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum Error {
    /// Indicates an unspecified, internal error.
    Unspecified,
}

/// A builder for creating new [`Hasher`]s.
///
/// A value of a type implementing this trait already contains everything it
/// needs (such as OS handles) to start creating hashers.
pub trait Builder {
    /// The concrete [`Hasher`] generated by this trait.
    type Hasher: Hasher;

    /// Begins a new hashing operation, returning a new [`Hasher`] to manage
    /// the computation.
    fn new_hasher(&self) -> Result<Self::Hasher, Error>;

    /// Convenience function for hashing a contiguous buffer without having
    /// to deal with a hasher directly.
    fn hash_contiguous(
        &self,
        bytes: &[u8],
        out: &mut Digest,
    ) -> Result<(), Error> {
        let mut hasher = self.new_hasher()?;
        hasher.write(bytes)?;
        hasher.finish(out)
    }
}

/// A particular hashing operation in progress.
///
/// Compare Rust's [`Hasher`] trait.
pub trait Hasher {
    /// Feeds more data into the current hashing operation.
    fn write(&mut self, bytes: &[u8]) -> Result<(), Error>;

    /// Finishes the current hashing operation, writing the result to the given
    /// buffer.
    fn finish(self, out: &mut Digest) -> Result<(), Error>;
}
